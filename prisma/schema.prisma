generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User{
  id        String   @id @default(uuid())
  ceatedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt()

  name String
  surname String?

  imageId String?
  image AvatarImage? @relation(fields: [imageId],references: [id])
  
  accessTokens    AccessToken[]
  emailProviders EmailProvider[]
  favorites Favorite[]
  items Item[]

  chatUsers ChatUser[]
  messages Message[]
}

model AccessToken{
  id        String   @id @default(uuid())
  ceatedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt()

  token       String @unique
  expiresIn   DateTime 

  userId String
  user User @relation(fields: [userId],references: [id])
}

model EmailProvider{
  id        String   @id @default(uuid())
  ceatedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt()

  email         String
  passwordhash  String

  userId String
  user User @relation(fields: [userId],references: [id])
}


model Favorite{  
  id        String   @id @default(uuid())
  ceatedAt  DateTime @default(now())

  userId String
  user User @relation(fields: [userId],references: [id])

  itemId String
  item Item @relation(fields: [itemId],references: [id])
}


model TempFavoriteList{
  id        String   @id @default(uuid())
  ceatedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt()

  tempFavorites TempFavorite[]
}

model TempFavorite{  
  id        String   @id @default(uuid())
  ceatedAt  DateTime @default(now())

  tempFavoriteListId String
  tempFavoriteList TempFavoriteList @relation(fields: [tempFavoriteListId],references: [id])

  itemId String
  item Item @relation(fields: [itemId],references: [id])
}


model Item{
  id        String @id @default(uuid())
  ceatedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt()
  
  lable String
  price Int
  description String?

  imageId String?
  image ItemImage? @relation(fields: [imageId],references: [id])

  userId String?
  user User? @relation(fields: [userId],references: [id])

  favorites Favorite[]
  tempFavorites TempFavorite[]
}

model ItemImage{
  id String @id @unique @default(uuid())

  createAt DateTime @default(now())

  buffer  Bytes
  buffer0 Bytes
  buffer1 Bytes
  buffer2 Bytes
  size  Int
  size0 Int
  size1 Int
  size2 Int

  items Item[]
}


model AvatarImage{
  id String @id @unique @default(uuid())

  createAt DateTime @default(now())

  type String?
  
  buffer  Bytes
  // buffer0 Bytes
  // buffer1 Bytes
  size  Int
  // size0 Int
  // size1 Int

  users User[]
}


model Chat{
  id        String @id @default(uuid())
  ceatedAt  DateTime @default(now())

  messages Message[] @relation("messages_of_chat")
  chatUsers ChatUser[]

  lastMessageId String?
  lastMessage Message? @relation(fields: [lastMessageId],references: [id])
}

model ChatUser{
  id String @id @default(uuid())

  userId String
  user User @relation(fields: [userId],references: [id])

  chatId String
  chat Chat @relation(fields: [chatId],references: [id])

  lastMessageId String?
  lastMessage Message? @relation(fields: [lastMessageId],references: [id])
}

model Message{
  id String @id @default(uuid())
  ceatedAt DateTime @default(now())

  text String

  userId String
  user User @relation(fields: [userId],references: [id])

  chatId String
  chat Chat @relation("messages_of_chat",fields: [chatId],references: [id])


  lastMessageChatUser ChatUser[]
  lastMessageOfChat Chat[]

  nextMessage Message[] @relation("MessageRef")
  prevMessageID String?
  prevMessage Message? @relation("MessageRef", fields: [prevMessageID],references: [id])
}
